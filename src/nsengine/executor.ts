
/**
 * @file Executor.ts
 * @description This file contains the Executor class, which is responsible for executing the intermediate code generated by the parser.
 * 
 */

import * as prg from "./program";
import { printInstruction } from "./program";
import { generateObject, IObjectGenerator } from "../utilities/object_generator";


class ExternalFunction {
    id: string;
    signature: string;
    callback: Function;

    constructor(id: string, signature: string, callback: Function) {
        this.id = id;
        this.signature = signature;
        this.callback = callback;
    }

    
}

class Interface {
    functions: ExternalFunction[];

    constructor(functions: ExternalFunction[]) {
        this.functions = functions;
    }
}

export class JSExecutor {
    stack: any[] = [];
    heap: any[] = [];
    ip: number = 0;
    sp: number = 0;
    fp: number = 0;
    ret: any;
    program?: prg.Program;
    ops: Function[];

    
    constructor(maxStackSize: number = 1024) {
        this.ip = 0;
        this.sp = 0;
        this.fp = 0;
        this.ops = [
            this.op_noop.bind(this),
            this.op_term.bind(this),
            this.op_jump.bind(this),
            this.op_branch_true.bind(this),
            this.op_branch_false.bind(this),
            this.op_branch_null.bind(this),
            this.op_branch_not_null.bind(this),

            this.op_branch_equal.bind(this),
            this.op_branch_equal.bind(this),
            this.op_branch_equal.bind(this),

            this.op_branch_not_equal.bind(this),
            this.op_branch_not_equal.bind(this),
            this.op_branch_not_equal.bind(this),

            this.op_branch_greater_than.bind(this),
            this.op_branch_greater_than.bind(this),
            this.op_branch_greater_than.bind(this),

            this.op_branch_less_than.bind(this),
            this.op_branch_less_than.bind(this),
            this.op_branch_less_than.bind(this),

            this.op_branch_greater_than_or_equal.bind(this),
            this.op_branch_greater_than_or_equal.bind(this),
            this.op_branch_greater_than_or_equal.bind(this),

            this.op_branch_less_than_or_equal.bind(this),
            this.op_branch_less_than_or_equal.bind(this),
            this.op_branch_less_than_or_equal.bind(this),

            this.op_load_const_bool.bind(this),
            this.op_load_const_int.bind(this),
            this.op_load_const_float.bind(this),
            this.op_load_const_null.bind(this),
            this.op_load_const_string.bind(this),
            this.op_load_instruction_reference.bind(this),
            this.op_load_ptr.bind(this),
            this.op_load_literal_list.bind(this),
            this.op_load_literal_object.bind(this),
            this.op_load_literal_set.bind(this),
            // Integers
            this.op_add.bind(this),
            this.op_sub.bind(this),
            this.op_mul.bind(this),
            this.op_div.bind(this),
            this.op_mod.bind(this),
            this.op_pow.bind(this),
            // Floats
            this.op_add.bind(this),
            this.op_sub.bind(this),
            this.op_mul.bind(this),
            this.op_div.bind(this),
            this.op_mod.bind(this),
            this.op_pow.bind(this),

            this.op_add.bind(this),
            this.op_sb_replace_s.bind(this),
            // Integers
            this.op_greater_than.bind(this),
            this.op_less_than.bind(this),
            this.op_greater_than_or_equal.bind(this),
            this.op_less_than_or_equal.bind(this),
            this.op_equal.bind(this),
            this.op_not_equal.bind(this),
            // Floats
            this.op_greater_than.bind(this),
            this.op_less_than.bind(this),
            this.op_greater_than_or_equal.bind(this),
            this.op_less_than_or_equal.bind(this),
            this.op_equal.bind(this),
            this.op_not_equal.bind(this),

            this.op_equal.bind(this),
            this.op_not_equal.bind(this),

            this.op_equal.bind(this),
            this.op_not_equal.bind(this),

            this.op_equal.bind(this),
            this.op_not_equal.bind(this),

            this.op_and_b.bind(this),
            this.op_or_b.bind(this),
            this.op_xor_b.bind(this),

            this.op_range_i32.bind(this),
            this.op_range_f64.bind(this),

            this.op_not_b.bind(this),
            this.op_neg.bind(this),
            this.op_neg.bind(this),

            this.op_increment_local_post.bind(this),
            this.op_decrement_local_post.bind(this),

            this.op_increment_local_post.bind(this),
            this.op_decrement_local_post.bind(this),

            this.op_increment_member_post.bind(this),
            this.op_decrement_member_post.bind(this),

            this.op_increment_member_post.bind(this),
            this.op_decrement_member_post.bind(this),

            this.op_increment_element_post.bind(this),
            this.op_decrement_element_post.bind(this),

            this.op_increment_element_post.bind(this),
            this.op_decrement_element_post.bind(this),

            this.op_int_to_float.bind(this),
            this.op_float_to_int.bind(this),
            this.op_int_to_string.bind(this),
            this.op_float_to_string.bind(this),

            this.op_load_local.bind(this),
            this.op_load_local.bind(this),
            this.op_load_local.bind(this),

            this.op_store_local.bind(this),
            this.op_store_local.bind(this),
            this.op_store_local.bind(this),

            this.op_load_member.bind(this),
            this.op_load_member.bind(this),
            this.op_load_member.bind(this),

            this.op_store_member.bind(this),
            this.op_store_member.bind(this),
            this.op_store_member.bind(this),

            this.op_load_element.bind(this),
            this.op_load_element.bind(this),
            this.op_load_element.bind(this),

            this.op_store_element.bind(this),
            this.op_store_element.bind(this),
            this.op_store_element.bind(this),

            this.op_load_external.bind(this),

            this.op_alloc_stack.bind(this),
            this.op_pop_stack.bind(this),
            this.op_alloc_heap.bind(this),
            this.op_pop_heap.bind(this),

            this.op_call_internal.bind(this),
            this.op_call_external.bind(this),
            this.op_call_stack.bind(this),

            this.op_return.bind(this),
            this.op_return8.bind(this),
            this.op_return32.bind(this),
            this.op_return64.bind(this),

            this.op_push_return8.bind(this),
            this.op_push_return32.bind(this),
            this.op_push_return64.bind(this)
        ];
    }

    execute(program: prg.Program) {
        this.program = program;
        this.ip = 0;
        this.fp = 0;

        while (program.instructions[this.ip].opcode != prg.OP_TERM) {
            this.ops[program.instructions[this.ip].opcode]();
        }

        if (this.stack.length > 0) {
            return this.stack.pop();
        }
        return 0;
    }

    executeDebug(program: prg.Program) {
        this.program = program;
        this.ip = 0;
        this.fp = 0;

        while (program.instructions[this.ip].opcode != prg.OP_TERM) {
            console.log(printInstruction(program.instructions[this.ip]));
            this.ops[program.instructions[this.ip].opcode]();
            this.printStack();
        }

        if (this.stack.length > 0) {
            return this.stack.pop();
        }
        return 0;
    }

    printStack() {
        console.log("Stack: " + this.stack);
    }
    printHeap() {
        console.log("Heap: " + this.heap);
    }

    op_noop() {
        this.ip++;
    }
    op_term() {
        this.ip++;
    }
    op_jump() {
        this.ip = this.program?.instructions[this.ip].operand;
    }

    op_branch_false() {
        if (!this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_true() {
        if (this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_null() {
        if (this.stack.pop() == null) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_not_null() {
        if (this.stack.pop() != null) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_equal() {
        if (this.stack.pop() == this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_not_equal() {
        if (this.stack.pop() != this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_greater_than() {
        if (this.stack.pop() > this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_less_than() {
        if (this.stack.pop() < this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_greater_than_or_equal() {
        if (this.stack.pop() >= this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_branch_less_than_or_equal() {
        if (this.stack.pop() <= this.stack.pop()) {
            this.ip = this.program?.instructions[this.ip].operand;
        } else {
            this.ip++;
        }
    }

    op_and_b() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a && b);
        this.ip++;
    }

    op_or_b() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a || b);
        this.ip++;
    }

    op_xor_b() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a ^ b);
        this.ip++;
    }

    op_range_i32() {
        let end = this.stack.pop();
        let start = this.stack.pop();

        let arr = new Array((end - start));
        let j = 0;
        for (let i = start; i <= end; i += 1) {
            arr[j++] = i;
        }
        this.stack.push(arr);
        this.ip++;
    }

    op_range_f64() {
        let end = this.stack.pop();
        let start = this.stack.pop();
        let arr = new Array((end - start));
        let j = 0;
        for (let i = start; i <= end; i += 1) {
            arr[j++] = i;
        }
        this.stack.push(arr);
        this.ip++;
    }
    
    op_load_const_bool() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_load_const_int() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_load_const_float() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_load_const_null() {
        this.stack.push(null);
        this.ip++;
    }

    op_load_const_string() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_load_instruction_reference() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_load_ptr() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_load_literal_list() {
        const l = new Array(this.program?.instructions[this.ip].operand);
        for (let i = 0; i < l.length; i++) {
            l[i] = this.stack.pop();
        }
        this.stack.push(l);
        this.ip++;
    }

    op_load_literal_object() {
        const generator = this.program?.instructions[this.ip].operand as IObjectGenerator;
        const propertyCount = generator.properties.length;

        const values = [];
        for (let i = 0; i < propertyCount; i++) {
            values.push(this.stack.pop());
        }
            
        this.stack.push(generateObject(generator, values));
        this.ip++;
    }

    op_load_literal_set() {
        const length = this.program?.instructions[this.ip].operand;
        const l = new Array(length);
        for (let i = 0; i < length; i++) {
            l[i] = this.stack.pop();
        }
        this.stack.push(new Set(l));
        this.ip++;
    }


    op_add() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a + b);
        this.ip++;
    }

    op_sub() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a - b);
        this.ip++;
    }

    op_mul() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a * b);
        this.ip++;
    }

    op_div() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a / b);
        this.ip++;
    }

    op_mod() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a % b);
        this.ip++;
    }

    op_pow() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a ** b);
        this.ip++;
    }


    op_sb_replace_s() {
        // Get string
        let str = this.stack.pop();
        let elements = this.program?.instructions[this.ip].operand;
        for (let i = 0; i < elements; i++) {
            let replace = this.stack.pop();
            str = str.replace(`\${${i}}`, replace.toString());
        }
        this.stack.push(str);
        this.ip++;
    }

    op_greater_than() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a > b);
        this.ip++;
    }

    op_less_than() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a < b);
        this.ip++;
    }

    op_greater_than_or_equal() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a >= b);
        this.ip++;
    }

    op_less_than_or_equal() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a <= b);
        this.ip++;
    }

    op_equal() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a == b);
        this.ip++;
    }

    op_not_equal() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a != b);
        this.ip++;
    }

    op_not_b() {
        let a = this.stack.pop();
        this.stack.push(!a);
        this.ip++;
    }

    op_neg() {
        let a = this.stack.pop();
        this.stack.push(-a);
        this.ip++;
    }

    op_increment_local_post() {
        this.stack[this.fp + this.program?.instructions[this.ip].operand] += this.stack.pop();
        this.ip++;
    }

    op_decrement_local_post() {
        this.stack[this.fp + this.program?.instructions[this.ip].operand] -= this.stack.pop();
        this.ip++;
    }

    op_increment_member_post() {
        let a = this.stack.pop();
        a[this.program?.instructions[this.ip].operand] += this.stack.pop();
        this.ip++;
    }

    op_decrement_member_post() {
        let a = this.stack.pop();
        a[this.program?.instructions[this.ip].operand] -= this.stack.pop();
        this.ip++;
    }

    op_increment_element_post() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        let c = this.stack.pop();
        a[b] += c;
        this.ip++;
    }

    op_decrement_element_post() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        let c = this.stack.pop();
        a[b] -= c;
        this.ip++;
    }

    op_int_to_float() {
        let a = this.stack.pop();
        this.stack.push(a);
        this.ip++;
    }

    op_float_to_int() {
        let a = this.stack.pop() as number;
        this.stack.push(Math.floor(a));
        this.ip++;
    }

    op_int_to_string() {
        let a = this.stack.pop();
        this.stack.push(a.toString());
        this.ip++;
    }

    op_float_to_string() {
        let a = this.stack.pop();
        this.stack.push(a.toString());
        this.ip++;
    }

    op_load_local() {
        this.stack.push(this.stack[this.fp + this.program?.instructions[this.ip].operand]);
        this.ip++;
    }

    op_store_local() {
        this.stack[this.fp + this.program?.instructions[this.ip].operand] = this.stack.pop();
        this.ip++;
    }

    op_load_external() {
        this.stack.push(this.program?.instructions[this.ip].operand);
        this.ip++;
    }

    op_alloc_stack() {
        for (let i = 0; i < this.program?.instructions[this.ip].operand; i++) {
            this.stack.push(null);
            this.sp++;
        }
        this.ip++;
    }

    op_pop_stack() {
        for (let i = 0; i < this.program?.instructions[this.ip].operand; i++) {
            this.stack.pop();
            this.sp--;
        }
        this.ip++;
    }

    op_alloc_heap() {
        for (let i = 0; i < this.program?.instructions[this.ip].operand; i++) {
            this.heap.push(null);
        }
        this.ip++;
    }

    op_load_member() {
        let a = this.stack.pop();
        const member = a[this.program?.instructions[this.ip].operand];

        if (member === undefined) {
            throw new Error(`Member ${this.program?.instructions[this.ip].operand} is undefined`);
        }
        if (typeof member === 'function') {
            this.stack.push(member.bind(a));
        } else {
            this.stack.push(member);
        }
        //this.stack.push();
        this.ip++;
    }

    op_store_member() {
        let a = this.stack.pop();
        a[this.program?.instructions[this.ip].operand] = this.stack.pop();
        this.ip++;
    }

    op_load_element() {
        let b = this.stack.pop();
        let a = this.stack.pop();
        this.stack.push(a[b]);
        this.ip++;
    }
    op_store_element() {
        
        let b = this.stack.pop();
        let a = this.stack.pop();
        let c = this.stack.pop();
        a[b] = c;
        this.ip++;
    }

    

    op_pop_heap() {
        for (let i = 0; i < this.program?.instructions[this.ip].operand; i++) {
            this.heap.pop();
        }
        this.ip++;
    }

    op_call_internal() {
        // push a stack frame
        this.stack.push(this.fp);
        // push the return address
        this.stack.push(this.ip + 1);
        // set the new frame pointer
        this.fp = this.stack.length;
        // set the new instruction pointer
        this.ip = this.program?.instructions[this.ip].operand;

    }

    op_return() {
        this.ip = this.stack.pop();
        this.fp = this.stack.pop();
    }

    op_return8() {
        this.ret = this.stack.pop();
        while (this.stack.length > this.fp) {
            this.stack.pop();
        }
        // set the new instruction pointer to the return address
        this.ip = this.stack.pop();
        // restore the frame pointer
        this.fp = this.stack.pop();
    }

    op_return32() {
        this.ret = this.stack.pop();
        while (this.stack.length > this.fp) {
            this.stack.pop();
        }
        // set the new instruction pointer to the return address
        this.ip = this.stack.pop();
        // restore the frame pointer
        this.fp = this.stack.pop();
    }

    op_return64() {
        this.ret = this.stack.pop();
        while (this.stack.length > this.fp) {
            this.stack.pop();
        }
        // set the new instruction pointer to the return address
        this.ip = this.stack.pop();
        // restore the frame pointer
        this.fp = this.stack.pop();
    }

    op_call_external() {
        let a = this.stack.pop();
        if(this.program?.instructions[this.ip].operand < 1) {
            this.ret = a();
        }
        else {
            let b = [];
            for (let i = 0; i < this.program?.instructions[this.ip].operand; i++) {
                b.push(this.stack.at(-(i+1)));
            }
            this.ret = a(...b.reverse());
        }
        this.ip++;
    }

    op_call_stack() {
        // push a stack frame
        this.stack.push(this.fp);
        // push the return address
        this.stack.push(this.ip + 1);
        // set the new frame pointer
        this.fp = this.stack.length;
        // set the new instruction pointer
        this.ip = this.stack.pop();
    }

    op_push_return8() {
        this.stack.push(this.ret);
        this.ip++;
    }

    op_push_return32() {
        this.stack.push(this.ret);
        this.ip++;
    }

    op_push_return64() {
        this.stack.push(this.ret);
        this.ip++;
    }

}